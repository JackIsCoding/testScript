#!/bin/env python
# -*- coding:utf8 -*-

from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
import binascii
from Crypto.Hash import SHA
from Crypto import Random

class RSATool:
    def __init__(self):
        self.public_key_=binascii.unhexlify('30818902818100BC720282F1CA7FD315A79B30321F654D692BEC630B05F9E9DFC1B98A576BF530B002B7639B796B82224B8931F16A359EEF923F776D4FAC4A1691C3C2902E49F546089F4711CA83272B6FE947D834B067537E6518CFC05E8D7636EB46AE1805AED58A1FD7E33B9E1945BA23AF0A674836F0C4FD8FA9AB1929BB619100C441746F0203010001')
        self.private_key_=binascii.unhexlify('3082025C02010002818100BC720282F1CA7FD315A79B30321F654D692BEC630B05F9E9DFC1B98A576BF530B002B7639B796B82224B8931F16A359EEF923F776D4FAC4A1691C3C2902E49F546089F4711CA83272B6FE947D834B067537E6518CFC05E8D7636EB46AE1805AED58A1FD7E33B9E1945BA23AF0A674836F0C4FD8FA9AB1929BB619100C441746F02030100010281806B394BE889FFB8DFB89097A2C2C24E77CF81E88D2A768A0EE2FC6DC023A20FEF561715961D9EE6E732F05BEE08F96FED314FBBC10E77A906B6F4D5B85D25997A75EB5B66EF62AD0AA79932682C965BD50DADAFA03E0D43171161CF3FA513CE98581B8F402AFE1BF1F36789D6CB04FF3D8661189E2248D341BE045232D9A77391024100E480FD75A2969973147AAAA95C2D705F4548AE8F67ADFD419F3B510EC8C788F52DED1C0793F05C033E7508463097858EB04DEB4BF7914C22FBB74E8148943013024100D31F06B4AD8A690E4E7BE91C8FF27CB5985BB597006CFDDF99E79EE06B13F77569243886A1B6F016B828F016A45FFE9D1075C297DE9806A5F11EF391911B8DB5024100AAF4122C5B2ABEBD093A48CA124B7081E66CDD242ED64DDE358A0437C260FE072887F76B77F3E07310DC30078B3D214FC279592B69998BD3B46CCCD00E83C77F02402BE78EE0721A8FA06F07EBC189D9F6BF5910F16196B013D7B54CEAC866DC3F21069D86B7D0D797745216095FDC0D2E89014C4C0C83390060F014ECB8400207E502401007464F0259EEC41D5D51556A68746470AF2154C53719CCC8A21006FD2E019399753BF4A77B5F9776D1B8401EDEFC40F1492363F0024684AF5460D56A2CD2EC')

    def encrypto(self, message):
        h = SHA.new(message)
        publickey = RSA.importKey(self.public_key_) 
        cipher = PKCS1_v1_5.new(publickey)
        #ciphertext = cipher.encrypt(message+h.digest())
        ciphertext = cipher.encrypt(message)
        #print len(message+h.digest())
        return ciphertext
   
    def decrypto(self, ciphertext):
        privatekey=RSA.importKey(self.private_key_) 
        dsize = SHA.digest_size
        sentinel = Random.new().read(15+dsize)
        cipher = PKCS1_v1_5.new(privatekey)
        decrypto_message = cipher.decrypt(ciphertext, sentinel)
        return decrypto_message

if __name__ == "__main__":
    message = 'FFFFFFFFFFFFFFFF'
    rsa_tool = RSATool()
    encrypto_data = rsa_tool.encrypto(message)
    print binascii.hexlify(encrypto_data).upper()

    decrypto_data = rsa_tool.decrypto(encrypto_data)
    dsize = SHA.digest_size
    print decrypto_data

    #digest = SHA.new(decrypto_data).digest()
    if message==decrypto_data:                # Note how we DO NOT look for the sentinel
        print "Encryption was correct."
    else:
        print "Encryption was not correct."

